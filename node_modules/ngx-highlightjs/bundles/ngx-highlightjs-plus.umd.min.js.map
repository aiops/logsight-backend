{"version":3,"sources":["../../../projects/ngx-highlightjs/plus/src/gist.model.ts","../../../projects/ngx-highlightjs/plus/src/code-loader.ts","../../../projects/ngx-highlightjs/plus/src/gist.ts","../../../projects/ngx-highlightjs/plus/src/code-from-url.ts","../../../projects/ngx-highlightjs/plus/src/highlight-plus.module.ts"],"names":["GIST_OPTIONS","InjectionToken","CodeLoader","_http","_options","this","prototype","getCodeFromGist","id","params","isOAuthProvided","HttpParams","set","clientId","clientSecret","fetchFile","responseType","getCodeFromUrl","url","options","test","isUrl","get","pipe","publishReplay","refCount","catchError","err","console","error","message","EMPTY","Injectable","args","providedIn","HttpClient","Optional","type","Inject","GistDirective","_loader","gistLoad","EventEmitter","Object","defineProperty","value","_this","subscribe","gist","emit","Directive","selector","Input","Output","GistFilePipe","transform","fileName","files","content","Pipe","name","CodeFromUrlPipe","NgModule","imports","HighlightModule","HttpClientModule","declarations","exports"],"mappings":"2mBAOaA,EAAe,IAAIC,EAAAA,eAA4B,6BCG1D,SAAAC,EAAoBC,EAA6DC,GAA7DC,KAAAF,MAAAA,EAA6DE,KAAAD,SAAAA,SAOjFF,EAAAI,UAAAC,gBAAA,SAAgBC,GACd,IAAIC,EAIJ,OAHIJ,KAAKK,oBACPD,GAAS,IAAIE,EAAAA,YAAaC,IAAI,YAAaP,KAAKD,SAASS,UAAUD,IAAI,gBAAiBP,KAAKD,SAASU,eAEjGT,KAAKU,UAAU,gCAAgCP,EAAM,CAAEC,OAAMA,EAAEO,aAAc,UAOtFd,EAAAI,UAAAW,eAAA,SAAeC,GACb,OAAOb,KAAKU,UAAUG,EAAK,CAAEF,aAAc,UAMrCd,EAAAI,UAAAI,gBAAA,WACN,QAASL,KAAKD,YAAcC,KAAKD,SAASS,YAAcR,KAAKD,SAASU,cAGhEZ,EAAAI,UAAAS,UAAA,SAAUG,EAAaC,GAE7B,OAgBJ,SAAeD,GAEb,MADe,oFACDE,KAAKF,GAlBbG,CAAMH,GACDb,KAAKF,MAAMmB,IAAIJ,EAAKC,GAASI,KAElCC,EAAAA,cAAc,GACdC,EAAAA,WACAC,EAAAA,YAAW,SAACC,GAEV,OADAC,QAAQC,MAAM,2CAA4CF,EAAIG,SACvDC,EAAAA,UAINA,EAAAA,qKA/CVC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANLC,EAAAA,2CASiCC,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAML,KAAA,CAACjC,yBCD3D,SAAAuC,EAAoBC,GAAAnC,KAAAmC,QAAAA,EAUVnC,KAAAoC,SAAW,IAAIC,EAAAA,oBAPzBC,OAAAC,eACYL,EAAAjC,UAAA,OAAI,KADhB,SACiBuC,GADjB,IAAAC,EAAAzC,KAEMwC,GACFxC,KAAKmC,QAAQjC,gBAAgBsC,GAAOE,WAAU,SAACC,GAAe,OAAAF,EAAKL,SAASQ,KAAKD,gEAXtFE,EAAAA,UAASjB,KAAA,CAAC,CACTkB,SAAU,sDAJHjD,mCAWNkD,EAAAA,wBAOAC,EAAAA,2BAMH,SAAAC,YACEA,EAAAhD,UAAAiD,UAAA,SAAUP,EAAYQ,GACpB,OAAQR,GAAQA,EAAKS,OAAST,EAAKS,MAAMD,GAAaR,EAAKS,MAAMD,GAAUE,QAAU,+BALxFC,EAAAA,KAAI1B,KAAA,CAAC,CACJ2B,KAAM,gCCdN,SAAAC,EAAoBrB,GAAAnC,KAAAmC,QAAAA,SAGpBqB,EAAAvD,UAAAiD,UAAA,SAAUrC,GACR,OAAOb,KAAKmC,QAAQvB,eAAeC,6BATtCyC,EAAAA,KAAI1B,KAAA,CAAC,CACJ2B,KAAM,2DAHC1D,WCuBT,iCAjBC4D,EAAAA,SAAQ7B,KAAA,CAAC,CACR8B,QAAS,CACPC,EAAAA,gBACAC,EAAAA,kBAEFC,aAAc,CACZ3B,EACAe,EACAO,GAEFM,QAAS,CACPH,EAAAA,gBACAzB,EACAe,EACAO","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface GistOptions {\n  clientId: string;\n  clientSecret: string;\n}\n\nexport const GIST_OPTIONS = new InjectionToken<GistOptions>('GIST_OPTIONS');\n\ninterface Owner {\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n}\n\ninterface User {\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  gravatar_id: string;\n  url: string;\n  html_url: string;\n  followers_url: string;\n  following_url: string;\n  gists_url: string;\n  starred_url: string;\n  subscriptions_url: string;\n  organizations_url: string;\n  repos_url: string;\n  events_url: string;\n  received_events_url: string;\n  type: string;\n  site_admin: boolean;\n}\n\ninterface ChangeStatus {\n  total: number;\n  additions: number;\n  deletions: number;\n}\n\ninterface History {\n  user: User;\n  version: string;\n  committed_at: Date;\n  change_status: ChangeStatus;\n  url: string;\n}\n\ninterface Files {\n  [fileName: string]: {\n    filename: string;\n    type: string;\n    language: string;\n    raw_url: string;\n    size: number;\n    truncated: boolean;\n    content: string;\n  };\n}\n\nexport interface Gist {\n  url: string;\n  forks_url: string;\n  commits_url: string;\n  id: string;\n  node_id: string;\n  git_pull_url: string;\n  git_push_url: string;\n  html_url: string;\n  files: Files;\n  public: boolean;\n  created_at: Date;\n  updated_at: Date;\n  description: string;\n  comments: number;\n  user?: any;\n  comments_url: string;\n  owner: Owner;\n  forks: any[];\n  history: History[];\n  truncated: boolean;\n}\n\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, EMPTY } from 'rxjs';\nimport { catchError, publishReplay, refCount } from 'rxjs/operators';\nimport { Gist, GIST_OPTIONS, GistOptions } from './gist.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodeLoader {\n  constructor(private _http: HttpClient, @Optional() @Inject(GIST_OPTIONS) private _options: GistOptions) {\n  }\n\n  /**\n   * Get plus code\n   * @param id Gist ID\n   */\n  getCodeFromGist(id: string): Observable<Gist> {\n    let params!: HttpParams;\n    if (this.isOAuthProvided()) {\n      params = new HttpParams().set('client_id', this._options.clientId).set('client_secret', this._options.clientSecret);\n    }\n    return this.fetchFile(`https://api.github.com/gists/${id}`, { params, responseType: 'json' });\n  }\n\n  /**\n   * Get code by URL\n   * @param url File raw link\n   */\n  getCodeFromUrl(url: string): Observable<string> {\n    return this.fetchFile(url, { responseType: 'text' });\n  }\n\n  /**\n   * Check if OAuth option is provided\n   */\n  private isOAuthProvided(): boolean {\n    return !!this._options && !!this._options.clientId && !!this._options.clientSecret;\n  }\n\n  private fetchFile(url: string, options: any): Observable<any> {\n    // Check if URL is valid\n    if (isUrl(url)) {\n      return this._http.get(url, options).pipe(\n        // Catch response\n        publishReplay(1),\n        refCount(),\n        catchError((err: Error) => {\n          console.error('[NgxHighlight]: Unable to fetch the URL!', err.message);\n          return EMPTY;\n        })\n      );\n    }\n    return EMPTY;\n  }\n\n}\n\nfunction isUrl(url: string) {\n  const regExp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n  return regExp.test(url);\n}\n","import { Directive, Pipe, Input, Output, PipeTransform, EventEmitter } from '@angular/core';\nimport { CodeLoader } from './code-loader';\nimport { Gist } from './gist.model';\n\n@Directive({\n  selector: '[gist]'\n})\nexport class GistDirective {\n\n  constructor(private _loader: CodeLoader) {\n  }\n\n  @Input()\n  private set gist(value: string) {\n    if (value) {\n      this._loader.getCodeFromGist(value).subscribe((gist: Gist) => this.gistLoad.emit(gist));\n    }\n  }\n\n  @Output() gistLoad = new EventEmitter<Gist>();\n}\n\n@Pipe({\n  name: 'gistFile'\n})\nexport class GistFilePipe implements PipeTransform {\n  transform(gist: Gist, fileName: string): string | null {\n    return (gist && gist.files && gist.files[fileName]) ? gist.files[fileName].content : null;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CodeLoader } from './code-loader';\n\n@Pipe({\n  name: 'codeFromUrl'\n})\nexport class CodeFromUrlPipe implements PipeTransform {\n\n  constructor(private _loader: CodeLoader) {\n  }\n\n  transform(url: string): Observable<string> {\n    return this._loader.getCodeFromUrl(url);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HighlightModule } from 'ngx-highlightjs';\n// Uncomment the following line for development\n// import { HighlightModule } from '../../src/public-api';\nimport { GistFilePipe, GistDirective } from './gist';\nimport { CodeFromUrlPipe } from './code-from-url';\n\n@NgModule({\n  imports: [\n    HighlightModule,\n    HttpClientModule\n  ],\n  declarations: [\n    GistDirective,\n    GistFilePipe,\n    CodeFromUrlPipe\n  ],\n  exports: [\n    HighlightModule,\n    GistDirective,\n    GistFilePipe,\n    CodeFromUrlPipe\n  ]\n})\nexport class HighlightPlusModule {\n}\n"]}