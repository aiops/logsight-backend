{"version":3,"sources":["../../projects/ngx-highlightjs/src/lib/highlight.model.ts","../../../node_modules/tslib/tslib.es6.js","../../projects/ngx-highlightjs/src/lib/highlight.loader.ts","../../projects/ngx-highlightjs/src/lib/highlight.service.ts","../../projects/ngx-highlightjs/src/lib/highlight.ts","../../projects/ngx-highlightjs/src/lib/highlight.module.ts"],"names":["HIGHLIGHT_OPTIONS","InjectionToken","Object","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","HighlightLoader","doc","platformId","_options","_this","this","_ready","BehaviorSubject","ready","asObservable","pipe","filter","hljs","map","take","isPlatformBrowser","defaultView","_loadLibrary","switchMap","lineNumbersLoader","loadLineNumbers","tap","EMPTY","catchError","console","subscribe","prototype","fullLibraryLoader","coreLibraryLoader","throwError","languages","loadFullLibrary","keys","length","loadCoreLibrary","_loadLanguages","entries","_a","_b","langName","langLoader","importModule","langFunc","registerLanguage","zip","apply","arguments","concat","__spread","Injectable","args","providedIn","Inject","DOCUMENT","PLATFORM_ID","Optional","type","moduleLoader","from","module","default","HighlightJS","_loader","options","_hljs","config","configure","listLanguages","defineProperty","highlight","name","ignore_illegals","continuation","highlightAuto","languageSubset","fixMarkup","highlightBlock","block","initHighlighting","language","getLanguage","lineNumbersBlock","el","Highlight","_sanitizer","highlighted","EventEmitter","_nativeElement","nativeElement","ngOnChanges","changes","code","currentValue","previousValue","highlightElement","setTextContent","res","setInnerHTML","lineNumbers","addLineNumbers","emit","destroyLineNumbersObserver","animationFrameScheduler","schedule","_lineNumbersObs","MutationObserver","firstElementChild","tagName","toUpperCase","classList","add","observe","childList","disconnect","content","textContent","innerHTML","sanitize","SecurityContext","HTML","Directive","host","[class.hljs]","selector","ElementRef","DomSanitizer","Input","Output","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface HighlightLibrary {\n\n  /**\n   * Core highlighting function.\n   * @param name Accepts a language name, or an alias\n   * @param value A string with the code to highlight.\n   * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\n   * even in case of detecting illegal syntax for the language instead of throwing an exception.\n   * @param continuation An optional mode stack representing unfinished parsing.\n   * When present, the function will restart parsing from this state instead of initializing a new one\n   */\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): HighlightResult;\n\n  /**\n   * Highlighting with language detection.\n   * @param value Accepts a string with the code to highlight\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\n   */\n  highlightAuto(value: string, languageSubset: string[]): HighlightResult;\n\n  /**\n   * Post-processing of the highlighted markup.\n   * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\n   * Options are set globally with configure.\n   * @param value Accepts a string with the highlighted markup\n   */\n  fixMarkup(value: string): string;\n\n  /**\n   * Applies highlighting to a DOM node containing code.\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\n   * See the class reference for all available language names and aliases.\n   * @param block The element to apply highlight on.\n   */\n  highlightBlock(block: HTMLElement): void;\n\n  /**\n   * Configures global options:\n   * @param config HighlightJs configuration argument\n   */\n  configure(config: HighlightConfig): void;\n\n  /**\n   * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n   */\n  initHighlighting(): void;\n\n  /**\n   * Adds new language to the library under the specified name. Used mostly internally.\n   * @param name A string with the name of the language being registered\n   * @param language A function that returns an object which represents the language definition.\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\n   */\n  registerLanguage(name: string, language: () => any): void;\n\n  /**\n   * @return The languages names list.\n   */\n  listLanguages(): string[];\n\n  /**\n   * Looks up a language by name or alias.\n   * @param name Language name\n   * @return The language object if found, undefined otherwise.\n   */\n  getLanguage(name: string): any;\n\n  /**\n   * Add line numbers to code element\n   * @param el Code element\n   */\n  lineNumbersBlock(el: Element): void;\n}\n\nexport interface HighlightConfig {\n  /** tabReplace: a string used to replace TAB characters in indentation. */\n  tabReplace?: string;\n  /** useBR: a flag to generate <br> tags instead of new-line characters in the output, useful when code is marked up using a non-<pre> container. */\n  useBR?: boolean;\n  /** classPrefix: a string prefix added before class names in the generated markup, used for backwards compatibility with stylesheets. */\n  classPrefix?: string;\n  /** languages: an array of language names and aliases restricting auto detection to only these languages. */\n  languages?: string[];\n}\n\nexport interface HighlightResult {\n  language?: string;\n  second_best?: any;\n  top?: any;\n  value?: string;\n  relevance?: number;\n}\n\nexport interface HighlightOptions {\n  config?: HighlightConfig;\n  languages?: { [name: string]: () => Promise<any> };\n  coreLibraryLoader?: () => Promise<any>;\n  fullLibraryLoader?: () => Promise<any>;\n  lineNumbersLoader?: () => Promise<any>;\n}\n\nexport const HIGHLIGHT_OPTIONS = new InjectionToken<HighlightOptions>('HIGHLIGHT_OPTIONS');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable, Inject, PLATFORM_ID, Optional } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { BehaviorSubject, Observable, from, EMPTY, zip, throwError } from 'rxjs';\nimport { catchError, tap, map, switchMap, filter, take } from 'rxjs/operators';\nimport { HIGHLIGHT_OPTIONS, HighlightLibrary, HighlightOptions } from './highlight.model';\n\n// @dynamic\n@Injectable({\n  providedIn: 'root'\n})\nexport class HighlightLoader {\n  // Stream that emits when hljs library is loaded and ready to use\n  private readonly _ready = new BehaviorSubject<HighlightLibrary | null>(null);\n  readonly ready: Observable<HighlightLibrary> = this._ready.asObservable().pipe(\n    filter((hljs: HighlightLibrary | null) => !!hljs),\n    map((hljs: HighlightLibrary | null) => hljs as HighlightLibrary),\n    take(1)\n  );\n\n  constructor(@Inject(DOCUMENT) doc: any,\n              @Inject(PLATFORM_ID) platformId: object,\n              @Optional() @Inject(HIGHLIGHT_OPTIONS) private _options: HighlightOptions) {\n    // Check if hljs is already available\n    if (isPlatformBrowser(platformId) && doc.defaultView.hljs) {\n      this._ready.next(doc.defaultView.hljs);\n    } else {\n      // Load hljs library\n      this._loadLibrary().pipe(\n        switchMap((hljs: HighlightLibrary) => {\n          if (this._options && this._options.lineNumbersLoader) {\n            // Make hljs available on window object (required for the line numbers library)\n            doc.defaultView.hljs = hljs;\n            // Load line numbers library\n            return this.loadLineNumbers().pipe(tap(() => this._ready.next(hljs)));\n          } else {\n            this._ready.next(hljs);\n            return EMPTY;\n          }\n        }),\n        catchError((e: any) => {\n          console.error('[HLJS] ', e);\n          return EMPTY;\n        })\n      ).subscribe();\n    }\n  }\n\n  /**\n   * Lazy-Load highlight.js library\n   */\n  private _loadLibrary(): Observable<any> {\n    if (this._options) {\n      if (this._options.fullLibraryLoader && this._options.coreLibraryLoader) {\n        return throwError('The full library and the core library were imported, only one of them should be imported!');\n      }\n      if (this._options.fullLibraryLoader && this._options.languages) {\n        return throwError('The highlighting languages were imported they are not needed!');\n      }\n      if (this._options.coreLibraryLoader && !this._options.languages) {\n        return throwError('The highlighting languages were not imported!');\n      }\n      if (!this._options.coreLibraryLoader && this._options.languages) {\n        return throwError('The core library was not imported!');\n      }\n      if (this._options.fullLibraryLoader) {\n        return this.loadFullLibrary();\n      }\n      if (this._options.coreLibraryLoader && this._options.languages && Object.keys(this._options.languages).length) {\n        return this.loadCoreLibrary().pipe(switchMap((hljs: HighlightLibrary) => this._loadLanguages(hljs)));\n      }\n    }\n    return throwError('Highlight.js library was not imported!');\n  }\n\n  /**\n   * Lazy-load highlight.js languages\n   */\n  private _loadLanguages(hljs: HighlightLibrary): Observable<any> {\n    const languages = Object.entries(this._options.languages!).map(([langName, langLoader]) =>\n      importModule(langLoader()).pipe(\n        tap((langFunc: any) => hljs.registerLanguage(langName, langFunc))\n      )\n    );\n    return zip(...languages).pipe(map(() => hljs));\n  }\n\n\n  /**\n   * Import highlight.js core library\n   */\n  private loadCoreLibrary(): Observable<HighlightLibrary> {\n    return importModule(this._options.coreLibraryLoader!());\n  }\n\n  /**\n   * Import highlight.js library with all languages\n   */\n  private loadFullLibrary(): Observable<HighlightLibrary> {\n    return importModule(this._options.fullLibraryLoader!());\n  }\n\n\n  /**\n   * Import line numbers library\n   */\n  private loadLineNumbers(): Observable<any> {\n    return importModule(this._options.lineNumbersLoader!());\n  }\n}\n\n/**\n * Map loader response to module object\n */\nconst importModule = (moduleLoader: Promise<any>): Observable<any> => {\n  return from(moduleLoader).pipe(\n    filter((module: any) => !!module && !!module.default),\n    map((module: any) => module.default)\n  );\n};\n","import { Injectable, Inject, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { HighlightConfig, HighlightResult, HighlightLibrary, HighlightOptions, HIGHLIGHT_OPTIONS } from './highlight.model';\nimport { HighlightLoader } from './highlight.loader';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HighlightJS {\n\n  private _hljs: HighlightLibrary | null = null;\n\n  // A reference for hljs library\n  get hljs(): HighlightLibrary | null {\n    return this._hljs;\n  }\n\n  constructor(private _loader: HighlightLoader, @Optional() @Inject(HIGHLIGHT_OPTIONS) options: HighlightOptions) {\n    // Load highlight.js library on init\n    _loader.ready.pipe().subscribe((hljs: HighlightLibrary) => {\n      this._hljs = hljs;\n      if (options && options.config) {\n        // Set global config if present\n        hljs.configure(options.config);\n        if (hljs.listLanguages().length < 1) {\n          console.error('[HighlightJS]: No languages were registered!');\n        }\n      }\n    });\n  }\n\n  /**\n   * Core highlighting function.\n   * @param name Accepts a language name, or an alias\n   * @param value A string with the code to highlight.\n   * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\n   * even in case of detecting illegal syntax for the language instead of throwing an exception.\n   * @param continuation An optional mode stack representing unfinished parsing.\n   * When present, the function will restart parsing from this state instead of initializing a new one\n   */\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): Observable<HighlightResult> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.highlight(name, value, ignore_illegals, continuation))\n    );\n  }\n\n  /**\n   * Highlighting with language detection.\n   * @param value Accepts a string with the code to highlight\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\n   */\n  highlightAuto(value: string, languageSubset: string[]): Observable<HighlightResult> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.highlightAuto(value, languageSubset))\n    );\n  }\n\n  /**\n   * Post-processing of the highlighted markup.\n   * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\n   * Options are set globally with configure.\n   * @param value Accepts a string with the highlighted markup\n   */\n  fixMarkup(value: string): Observable<string> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.fixMarkup(value))\n    );\n  }\n\n  /**\n   * Applies highlighting to a DOM node containing code.\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\n   * See the class reference for all available language names and aliases.\n   * @param block The element to apply highlight on.\n   */\n  highlightBlock(block: HTMLElement): Observable<void> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.highlightBlock(block))\n    );\n  }\n\n  /**\n   * Configures global options:\n   * @param config HighlightJs configuration argument\n   */\n  configure(config: HighlightConfig): Observable<void> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.configure(config))\n    );\n  }\n\n  /**\n   * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n   */\n  initHighlighting(): Observable<void> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.initHighlighting())\n    );\n  }\n\n  /**\n   * Adds new language to the library under the specified name. Used mostly internally.\n   * @param name A string with the name of the language being registered\n   * @param language A function that returns an object which represents the language definition.\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\n   */\n  registerLanguage(name: string, language: () => any): Observable<HighlightLibrary> {\n    return this._loader.ready.pipe(\n      tap((hljs: HighlightLibrary) => hljs.registerLanguage(name, language))\n    );\n  }\n\n  /**\n   * @return The languages names list.\n   */\n  listLanguages(): Observable<string[]> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.listLanguages())\n    );\n  }\n\n  /**\n   * Looks up a language by name or alias.\n   * @param name Language name\n   * @return The language object if found, undefined otherwise.\n   */\n  getLanguage(name: string): Observable<any> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.getLanguage(name))\n    );\n  }\n\n  /**\n   * Display line numbers\n   * @param el Code element\n   */\n  lineNumbersBlock(el: HTMLElement): Observable<any> {\n    return this._loader.ready.pipe(\n      filter((hljs: HighlightLibrary) => !!hljs.lineNumbersBlock),\n      tap((hljs: HighlightLibrary) => hljs.lineNumbersBlock(el))\n    );\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  Inject,\n  Optional,\n  OnChanges,\n  SimpleChanges,\n  EventEmitter,\n  ElementRef,\n  SecurityContext\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { animationFrameScheduler } from 'rxjs';\nimport { HighlightJS } from './highlight.service';\nimport { HIGHLIGHT_OPTIONS, HighlightOptions, HighlightResult } from './highlight.model';\n\n@Directive({\n  host: {\n    '[class.hljs]': 'true'\n  },\n  selector: '[highlight]'\n})\nexport class Highlight implements OnChanges {\n\n  // Highlighted Code\n  private readonly _nativeElement: HTMLElement;\n\n  // Temp observer to observe when line numbers has been added to code element\n  private _lineNumbersObs: any;\n\n  // Highlight code input\n  @Input('highlight') code!: string;\n\n  // An optional array of language names and aliases restricting detection to only those languages.\n  // The subset can also be set with configure, but the local parameter overrides the option if set.\n  @Input() languages!: string[];\n\n  // Show line numbers\n  @Input() lineNumbers!: boolean;\n\n  // Stream that emits when code string is highlighted\n  @Output() highlighted = new EventEmitter<HighlightResult>();\n\n  constructor(el: ElementRef,\n              private _hljs: HighlightJS,\n              private _sanitizer: DomSanitizer,\n              @Optional() @Inject(HIGHLIGHT_OPTIONS) private _options: HighlightOptions) {\n    this._nativeElement = el.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (\n      this.code &&\n      changes.code &&\n      typeof changes.code.currentValue !== 'undefined' &&\n      changes.code.currentValue !== changes.code.previousValue\n    ) {\n      this.highlightElement(this.code, this.languages);\n    }\n  }\n\n  /**\n   * Highlighting with language detection and fix markup.\n   * @param code Accepts a string with the code to highlight\n   * @param languages An optional array of language names and aliases restricting detection to only those languages.\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\n   */\n  highlightElement(code: string, languages: string[]): void {\n    // Set code text before highlighting\n    this.setTextContent(code);\n    this._hljs.highlightAuto(code, languages).subscribe((res: any) => {\n      // Set highlighted code\n      this.setInnerHTML(res.value);\n      // Check if user want to show line numbers\n      if (this.lineNumbers && this._options && this._options.lineNumbersLoader) {\n        this.addLineNumbers();\n      }\n      // Forward highlight response to the highlighted output\n      this.highlighted.emit(res);\n    });\n  }\n\n  private addLineNumbers() {\n    // Clean up line numbers observer\n    this.destroyLineNumbersObserver();\n    animationFrameScheduler.schedule(() => {\n      // Add line numbers\n      this._hljs.lineNumbersBlock(this._nativeElement).subscribe();\n      // If lines count is 1, the line numbers library will not add numbers\n      // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element\n      this._lineNumbersObs = new MutationObserver(() => {\n        if (this._nativeElement.firstElementChild && this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {\n          this._nativeElement.classList.add('hljs-line-numbers');\n        }\n        this.destroyLineNumbersObserver();\n      });\n      this._lineNumbersObs.observe(this._nativeElement, { childList: true });\n    });\n  }\n\n  private destroyLineNumbersObserver() {\n    if (this._lineNumbersObs) {\n      this._lineNumbersObs.disconnect();\n      this._lineNumbersObs = null;\n    }\n  }\n\n  private setTextContent(content: string) {\n    animationFrameScheduler.schedule(() =>\n      this._nativeElement.textContent = content\n    );\n  }\n\n  private setInnerHTML(content: string) {\n    animationFrameScheduler.schedule(() =>\n      this._nativeElement.innerHTML = this._sanitizer.sanitize(SecurityContext.HTML, content) || ''\n    );\n  }\n}\n\n","import { NgModule } from '@angular/core';\nimport { Highlight } from './highlight';\n\n@NgModule({\n  declarations: [Highlight],\n  exports: [Highlight]\n})\nexport class HighlightModule {\n}\n"]}