import { InjectionToken, Directive, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NgModel, FormsModule } from '@angular/forms';

const HIGHLIGHTJS_CONFIG = new InjectionToken('HighlightJs-Config');

class HighlightJsDirective {
    constructor(el, ngModel, doc, cog) {
        this.el = el;
        this.ngModel = ngModel;
        this.doc = doc;
        this.lang = 'html';
        this.mode = 'simple';
        Object.assign(this, cog);
    }
    escapeHTML(str) {
        return (str || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
    }
    init() {
        this.destroy();
        const el = this.el.nativeElement;
        const code = this.code || '' + el.innerHTML.trim();
        this.codeEl = this.doc.createElement(this.mode === 'default' ? 'div' : 'pre');
        const isSimple = this.mode === 'simple';
        if (isSimple) {
            if (this.lang) {
                this.codeEl.className = this.lang;
            }
            this.parentEl = el.parentNode;
            this.parentEl.insertBefore(this.codeEl, el.nextSibling);
        }
        else {
            this.parentEl = el;
            this.parentEl.innerHTML = ``;
            this.parentEl.appendChild(this.codeEl);
        }
        this.codeEl.innerHTML = code;
        hljs.configure(Object.assign({}, this.options));
        if (isSimple) {
            hljs.highlightBlock(this.codeEl);
        }
        else {
            this.codeEl.querySelectorAll('pre code').forEach((block) => {
                hljs.highlightBlock(block);
            });
        }
    }
    destroy() {
        if (this.codeEl && this.parentEl) {
            this.parentEl.removeChild(this.codeEl);
            this.codeEl = undefined;
        }
    }
    ngAfterViewInit() {
        var _a;
        this.init();
        if (this.ngModel) {
            this.modelValue$ = (_a = this.ngModel.valueChanges) === null || _a === void 0 ? void 0 : _a.subscribe((res) => {
                this.code = this.escapeHTML(res);
                this.init();
            });
        }
        else {
            this.initMutation();
        }
    }
    ngOnDestroy() {
        this.destroy();
        this.destroyMutation();
        if (this.modelValue$) {
            this.modelValue$.unsubscribe();
        }
    }
    initMutation() {
        if (typeof MutationObserver === 'undefined') {
            return;
        }
        this.observer = new MutationObserver(this.init.bind(this));
        this.observer.observe(this.el.nativeElement, {
            characterData: true,
            childList: true,
            subtree: true,
        });
    }
    destroyMutation() {
        if (!this.observer) {
            return;
        }
        this.observer.disconnect();
    }
}
HighlightJsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[highlight-js]',
                host: {
                    '[style.display]': `mode === 'simple' ? 'none' : null`,
                },
                exportAs: 'highlightJs',
            },] }
];
HighlightJsDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgModel, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HIGHLIGHTJS_CONFIG,] }] }
];
HighlightJsDirective.propDecorators = {
    options: [{ type: Input }],
    lang: [{ type: Input }],
    code: [{ type: Input }],
    mode: [{ type: Input }]
};

class HighlightJsModule {
}
HighlightJsModule.decorators = [
    { type: NgModule, args: [{
                imports: [FormsModule],
                declarations: [HighlightJsDirective],
                exports: [HighlightJsDirective],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { HIGHLIGHTJS_CONFIG, HighlightJsDirective, HighlightJsModule };
//# sourceMappingURL=ngx-highlight-js.js.map
