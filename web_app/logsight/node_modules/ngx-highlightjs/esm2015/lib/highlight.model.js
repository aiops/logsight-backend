import { InjectionToken } from '@angular/core';
export const HIGHLIGHT_OPTIONS = new InjectionToken('HIGHLIGHT_OPTIONS');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uL3Byb2plY3RzL25neC1oaWdobGlnaHRqcy9zcmMvIiwic291cmNlcyI6WyJsaWIvaGlnaGxpZ2h0Lm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUF3Ry9DLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUFtQixtQkFBbUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBIaWdobGlnaHRMaWJyYXJ5IHtcblxuICAvKipcbiAgICogQ29yZSBoaWdobGlnaHRpbmcgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSBuYW1lIEFjY2VwdHMgYSBsYW5ndWFnZSBuYW1lLCBvciBhbiBhbGlhc1xuICAgKiBAcGFyYW0gdmFsdWUgQSBzdHJpbmcgd2l0aCB0aGUgY29kZSB0byBoaWdobGlnaHQuXG4gICAqIEBwYXJhbSBpZ25vcmVfaWxsZWdhbHMgV2hlbiBwcmVzZW50IGFuZCBldmFsdWF0ZXMgdG8gYSB0cnVlIHZhbHVlLCBmb3JjZXMgaGlnaGxpZ2h0aW5nIHRvIGZpbmlzaFxuICAgKiBldmVuIGluIGNhc2Ugb2YgZGV0ZWN0aW5nIGlsbGVnYWwgc3ludGF4IGZvciB0aGUgbGFuZ3VhZ2UgaW5zdGVhZCBvZiB0aHJvd2luZyBhbiBleGNlcHRpb24uXG4gICAqIEBwYXJhbSBjb250aW51YXRpb24gQW4gb3B0aW9uYWwgbW9kZSBzdGFjayByZXByZXNlbnRpbmcgdW5maW5pc2hlZCBwYXJzaW5nLlxuICAgKiBXaGVuIHByZXNlbnQsIHRoZSBmdW5jdGlvbiB3aWxsIHJlc3RhcnQgcGFyc2luZyBmcm9tIHRoaXMgc3RhdGUgaW5zdGVhZCBvZiBpbml0aWFsaXppbmcgYSBuZXcgb25lXG4gICAqL1xuICBoaWdobGlnaHQobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBpZ25vcmVfaWxsZWdhbHM6IGJvb2xlYW4sIGNvbnRpbnVhdGlvbj86IGFueSk6IEhpZ2hsaWdodFJlc3VsdDtcblxuICAvKipcbiAgICogSGlnaGxpZ2h0aW5nIHdpdGggbGFuZ3VhZ2UgZGV0ZWN0aW9uLlxuICAgKiBAcGFyYW0gdmFsdWUgQWNjZXB0cyBhIHN0cmluZyB3aXRoIHRoZSBjb2RlIHRvIGhpZ2hsaWdodFxuICAgKiBAcGFyYW0gbGFuZ3VhZ2VTdWJzZXQgQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGFuZ3VhZ2UgbmFtZXMgYW5kIGFsaWFzZXMgcmVzdHJpY3RpbmcgZGV0ZWN0aW9uIHRvIG9ubHkgdGhvc2UgbGFuZ3VhZ2VzLlxuICAgKiBUaGUgc3Vic2V0IGNhbiBhbHNvIGJlIHNldCB3aXRoIGNvbmZpZ3VyZSwgYnV0IHRoZSBsb2NhbCBwYXJhbWV0ZXIgb3ZlcnJpZGVzIHRoZSBvcHRpb24gaWYgc2V0LlxuICAgKi9cbiAgaGlnaGxpZ2h0QXV0byh2YWx1ZTogc3RyaW5nLCBsYW5ndWFnZVN1YnNldDogc3RyaW5nW10pOiBIaWdobGlnaHRSZXN1bHQ7XG5cbiAgLyoqXG4gICAqIFBvc3QtcHJvY2Vzc2luZyBvZiB0aGUgaGlnaGxpZ2h0ZWQgbWFya3VwLlxuICAgKiBDdXJyZW50bHkgY29uc2lzdHMgb2YgcmVwbGFjaW5nIGluZGVudGF0aW9uIFRBQiBjaGFyYWN0ZXJzIGFuZCB1c2luZyA8YnI+IHRhZ3MgaW5zdGVhZCBvZiBuZXctbGluZSBjaGFyYWN0ZXJzLlxuICAgKiBPcHRpb25zIGFyZSBzZXQgZ2xvYmFsbHkgd2l0aCBjb25maWd1cmUuXG4gICAqIEBwYXJhbSB2YWx1ZSBBY2NlcHRzIGEgc3RyaW5nIHdpdGggdGhlIGhpZ2hsaWdodGVkIG1hcmt1cFxuICAgKi9cbiAgZml4TWFya3VwKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgaGlnaGxpZ2h0aW5nIHRvIGEgRE9NIG5vZGUgY29udGFpbmluZyBjb2RlLlxuICAgKiBUaGUgZnVuY3Rpb24gdXNlcyBsYW5ndWFnZSBkZXRlY3Rpb24gYnkgZGVmYXVsdCBidXQgeW91IGNhbiBzcGVjaWZ5IHRoZSBsYW5ndWFnZSBpbiB0aGUgY2xhc3MgYXR0cmlidXRlIG9mIHRoZSBET00gbm9kZS5cbiAgICogU2VlIHRoZSBjbGFzcyByZWZlcmVuY2UgZm9yIGFsbCBhdmFpbGFibGUgbGFuZ3VhZ2UgbmFtZXMgYW5kIGFsaWFzZXMuXG4gICAqIEBwYXJhbSBibG9jayBUaGUgZWxlbWVudCB0byBhcHBseSBoaWdobGlnaHQgb24uXG4gICAqL1xuICBoaWdobGlnaHRCbG9jayhibG9jazogSFRNTEVsZW1lbnQpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmVzIGdsb2JhbCBvcHRpb25zOlxuICAgKiBAcGFyYW0gY29uZmlnIEhpZ2hsaWdodEpzIGNvbmZpZ3VyYXRpb24gYXJndW1lbnRcbiAgICovXG4gIGNvbmZpZ3VyZShjb25maWc6IEhpZ2hsaWdodENvbmZpZyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgaGlnaGxpZ2h0aW5nIHRvIGFsbCA8cHJlPjxjb2RlPi4uPC9jb2RlPjwvcHJlPiBibG9ja3Mgb24gYSBwYWdlLlxuICAgKi9cbiAgaW5pdEhpZ2hsaWdodGluZygpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBBZGRzIG5ldyBsYW5ndWFnZSB0byB0aGUgbGlicmFyeSB1bmRlciB0aGUgc3BlY2lmaWVkIG5hbWUuIFVzZWQgbW9zdGx5IGludGVybmFsbHkuXG4gICAqIEBwYXJhbSBuYW1lIEEgc3RyaW5nIHdpdGggdGhlIG5hbWUgb2YgdGhlIGxhbmd1YWdlIGJlaW5nIHJlZ2lzdGVyZWRcbiAgICogQHBhcmFtIGxhbmd1YWdlIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIG9iamVjdCB3aGljaCByZXByZXNlbnRzIHRoZSBsYW5ndWFnZSBkZWZpbml0aW9uLlxuICAgKiBUaGUgZnVuY3Rpb24gaXMgcGFzc2VkIHRoZSBobGpzIG9iamVjdCB0byBiZSBhYmxlIHRvIHVzZSBjb21tb24gcmVndWxhciBleHByZXNzaW9ucyBkZWZpbmVkIHdpdGhpbiBpdC5cbiAgICovXG4gIHJlZ2lzdGVyTGFuZ3VhZ2UobmFtZTogc3RyaW5nLCBsYW5ndWFnZTogKCkgPT4gYW55KTogdm9pZDtcblxuICAvKipcbiAgICogQHJldHVybiBUaGUgbGFuZ3VhZ2VzIG5hbWVzIGxpc3QuXG4gICAqL1xuICBsaXN0TGFuZ3VhZ2VzKCk6IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBMb29rcyB1cCBhIGxhbmd1YWdlIGJ5IG5hbWUgb3IgYWxpYXMuXG4gICAqIEBwYXJhbSBuYW1lIExhbmd1YWdlIG5hbWVcbiAgICogQHJldHVybiBUaGUgbGFuZ3VhZ2Ugb2JqZWN0IGlmIGZvdW5kLCB1bmRlZmluZWQgb3RoZXJ3aXNlLlxuICAgKi9cbiAgZ2V0TGFuZ3VhZ2UobmFtZTogc3RyaW5nKTogYW55O1xuXG4gIC8qKlxuICAgKiBBZGQgbGluZSBudW1iZXJzIHRvIGNvZGUgZWxlbWVudFxuICAgKiBAcGFyYW0gZWwgQ29kZSBlbGVtZW50XG4gICAqL1xuICBsaW5lTnVtYmVyc0Jsb2NrKGVsOiBFbGVtZW50KTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBIaWdobGlnaHRDb25maWcge1xuICAvKiogdGFiUmVwbGFjZTogYSBzdHJpbmcgdXNlZCB0byByZXBsYWNlIFRBQiBjaGFyYWN0ZXJzIGluIGluZGVudGF0aW9uLiAqL1xuICB0YWJSZXBsYWNlPzogc3RyaW5nO1xuICAvKiogdXNlQlI6IGEgZmxhZyB0byBnZW5lcmF0ZSA8YnI+IHRhZ3MgaW5zdGVhZCBvZiBuZXctbGluZSBjaGFyYWN0ZXJzIGluIHRoZSBvdXRwdXQsIHVzZWZ1bCB3aGVuIGNvZGUgaXMgbWFya2VkIHVwIHVzaW5nIGEgbm9uLTxwcmU+IGNvbnRhaW5lci4gKi9cbiAgdXNlQlI/OiBib29sZWFuO1xuICAvKiogY2xhc3NQcmVmaXg6IGEgc3RyaW5nIHByZWZpeCBhZGRlZCBiZWZvcmUgY2xhc3MgbmFtZXMgaW4gdGhlIGdlbmVyYXRlZCBtYXJrdXAsIHVzZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggc3R5bGVzaGVldHMuICovXG4gIGNsYXNzUHJlZml4Pzogc3RyaW5nO1xuICAvKiogbGFuZ3VhZ2VzOiBhbiBhcnJheSBvZiBsYW5ndWFnZSBuYW1lcyBhbmQgYWxpYXNlcyByZXN0cmljdGluZyBhdXRvIGRldGVjdGlvbiB0byBvbmx5IHRoZXNlIGxhbmd1YWdlcy4gKi9cbiAgbGFuZ3VhZ2VzPzogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGlnaGxpZ2h0UmVzdWx0IHtcbiAgbGFuZ3VhZ2U/OiBzdHJpbmc7XG4gIHNlY29uZF9iZXN0PzogYW55O1xuICB0b3A/OiBhbnk7XG4gIHZhbHVlPzogc3RyaW5nO1xuICByZWxldmFuY2U/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGlnaGxpZ2h0T3B0aW9ucyB7XG4gIGNvbmZpZz86IEhpZ2hsaWdodENvbmZpZztcbiAgbGFuZ3VhZ2VzPzogeyBbbmFtZTogc3RyaW5nXTogKCkgPT4gUHJvbWlzZTxhbnk+IH07XG4gIGNvcmVMaWJyYXJ5TG9hZGVyPzogKCkgPT4gUHJvbWlzZTxhbnk+O1xuICBmdWxsTGlicmFyeUxvYWRlcj86ICgpID0+IFByb21pc2U8YW55PjtcbiAgbGluZU51bWJlcnNMb2FkZXI/OiAoKSA9PiBQcm9taXNlPGFueT47XG59XG5cbmV4cG9ydCBjb25zdCBISUdITElHSFRfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxIaWdobGlnaHRPcHRpb25zPignSElHSExJR0hUX09QVElPTlMnKTtcbiJdfQ==